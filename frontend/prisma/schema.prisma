generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TierFeature {
  id        String         @id @default(cuid())
  type      FeatureType
  tier      MembershipTier
  value     String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@unique([type, tier])
}

model MembershipFeature {
  id          String           @id @default(cuid())
  name        String           @unique
  description String
  tiers       MembershipTier[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model User {
  id            String              @id @default(cuid())
  name          String?
  email         String              @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  role          MembershipTier      @default(FREE)
  accounts      Account[]
  membership    Membership?
  messages      Message[]
  participantIn ParticipantStatus[]
  reservations  Reservation[]       @relation("UserReservations")
  sessions      Session[]
}

model Court {
  id           String        @id @default(cuid())
  name         String
  description  String?
  imageUrl     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  city         String        @default("San Francisco")
  location     String        @default("San Francisco, CA")
  state        String        @default("California")
  reservations Reservation[]
}

model Reservation {
  id              String              @id @default(cuid())
  name            String
  description     String?
  startTime       DateTime
  endTime         DateTime
  courtId         String
  ownerId         String
  shortUrl        String              @unique @default(cuid())
  paymentRequired Boolean             @default(false)
  paymentInfo     String?
  passwordRequired Boolean            @default(false)
  password        String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  invites         Invite[]
  messages        Message[]
  participants    ParticipantStatus[]
  court           Court               @relation(fields: [courtId], references: [id])
  owner           User                @relation("UserReservations", fields: [ownerId], references: [id])

  @@index([courtId])
  @@index([ownerId])
}

model ParticipantStatus {
  id            String      @id @default(cuid())
  userId        String
  reservationId String
  isGoing       Boolean     @default(true)
  hasPaid       Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@unique([userId, reservationId])
  @@index([userId])
  @@index([reservationId])
}

model Message {
  id            String      @id @default(cuid())
  content       String
  userId        String
  reservationId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([reservationId])
}

model Invite {
  id            String      @id @default(cuid())
  token         String      @unique
  email         String
  reservationId String
  createdAt     DateTime    @default(now())
  expiresAt     DateTime
  usedAt        DateTime?
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([reservationId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Membership {
  id                   String         @id @default(cuid())
  userId               String         @unique
  tier                 MembershipTier
  stripeCustomerId     String?        @unique
  stripeSubscriptionId String?
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean        @default(false)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  user                 User           @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum MembershipTier {
  FREE
  BASIC
  PREMIUM
  ADMIN
}

enum FeatureType {
  ACTIVE_RESERVATIONS
  EMAIL_NOTIFICATIONS
  CUSTOM_EVENTS
  ENHANCED_COURTS
  PRIORITY_SUPPORT
  PAYMENT_TRACKING
}
